    def _batchmap(self,index,ansatz,params,file=None):
        '''
        Function to map batches
    
        parameters
        ----------
        params: numpy.ndarray
            Initial circuit parameters
            
        ansatz: qiskit.circuit.quantumcircuit.QuantumCircuit
            Qiskit Quantum Circuit
        
        index: int
            Index of batch
            
        file: class
            _io.TextIOWrapper
    
        returns
        -------
        y_pred: numpy.ndarray
            Predicted values    
        '''    
        results = []
        
        if isinstance(self._backend, str):
            jobid = str(index)
            estimator = StatevectorEstimator()
            for a1, p1 in zip(ansatz, params):
                pub = [(a, [self.mapped_observables], [p]) for a, p in zip(a1,p1)]
                result = estimator.run(pubs=pub)
                results.append([jobid,result])
                           
        else:
            with Batch(backend=self._backend,max_time='8h') as batch:
                if self._backend.name!='ibm_quebec':
                    jobid = str(index)
                else:
                    jobid = batch.details()['id']
                estimator = Estimator(mode=batch)
                estimator.options.default_shots = self.shots
                estimator.options.resilience_level = self.resilience_level
            
                        
                for a1, p1 in zip(ansatz, params):
                    pub = [(a, [self.mapped_observables], [p]) for a, p in zip(a1,p1)]
                    result = estimator.run(pubs=pub)
                    results.append([result.job_id(),result])
                    file.write(f"{result.job_id()}\n")
    
        return results 